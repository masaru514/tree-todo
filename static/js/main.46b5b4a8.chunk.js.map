{"version":3,"sources":["hooks/index.ts","components/SubTask.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useTask","useState","list","setList","currentTextFieldValue","setCurrentTextFieldValue","enterHandler","e","key","text","isChecked","SubTask","item","index","create","setCreate","inputEl","useRef","useEffect","current","focus","parentChecked","setParentChecked","isAllChecked","length","every","i","Boolean","isIndeterminateSubTask","some","pl","pt","display","size","mr","isIndeterminate","onChange","updateList","map","target","checked","updateAllChecked","color","onClick","mt","ml","textAlign","newList","updateCheckboxListState","mx","ref","value","onKeyPress","onBlur","App","className","alignItems","placeholder","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.46b5b4a8.chunk.js","sourcesContent":["import { useState } from \"react\"\n\ntype TodoListObjectProps = {\n  text: string\n  isChecked?: boolean\n}\n\nconst useTask = () => {\n  const [list, setList] = useState<TodoListObjectProps[]>([])\n  const [currentTextFieldValue, setCurrentTextFieldValue] = useState('')\n  const enterHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key !== 'Enter' || currentTextFieldValue === '') return\n    list\n      ? setList([...list, { text: currentTextFieldValue, isChecked: false }])\n      : setList([{ text: currentTextFieldValue, isChecked: false }])\n    setCurrentTextFieldValue('')\n  }\n  return {\n    list,\n    setList,\n    currentTextFieldValue,\n    setCurrentTextFieldValue,\n    enterHandler,\n  }\n}\n\nexport default useTask","import { Checkbox } from \"@chakra-ui/checkbox\"\nimport { Box } from \"@chakra-ui/layout\"\nimport { Input } from \"@chakra-ui/react\"\nimport { ChangeEvent, useCallback, useEffect, useRef, useState } from \"react\"\nimport useTask from '../hooks';\n\nconst SubTask = (item: any, index: number) => {\n  const { list, setList, currentTextFieldValue, setCurrentTextFieldValue, enterHandler } = useTask()\n  const [create, setCreate] = useState(false)\n  const inputEl = useRef<any>(null)\n\n  useEffect(() => {\n    inputEl.current?.focus()\n  }, [create])\n\n  const blurHandler = () => {\n    setCreate(false)\n    if(currentTextFieldValue === '') return\n    list ? setList([...list, { text: currentTextFieldValue, isChecked: false }]) : setList([{ text: currentTextFieldValue, isChecked: false }])\n    setCurrentTextFieldValue('')\n  }\n\n  const updateCheckboxListState = (e: ChangeEvent<HTMLInputElement>, text: string) => {\n    const newList = list.map(item => {\n    if(item.text === text) {\n        return {\n          ...item,\n          isChecked: e.target.checked\n        }\n      }\n      return item\n    })\n    setList(newList)\n  }\n  const [parentChecked, setParentChecked] = useState(false)\n  const isAllChecked = !!list.length ? list.every(i => Boolean(i.isChecked)) : parentChecked\n  const isIndeterminateSubTask = list.some(Boolean) && !isAllChecked\n\n\n  const updateAllChecked = (e: ChangeEvent<HTMLInputElement>) => {\n    if(!list.length) {\n      setParentChecked(!parentChecked)\n    }\n    const updateList = list.map(i => {\n      return {\n        ...i,\n        isChecked: e.target.checked\n      }\n    })\n    setList(updateList)\n  }\n\n  const taskTextColor = () => {\n    if(!list.length) return '#333'\n    else return isAllChecked ? '#333' : 'gray.400'\n  }\n\n  return (\n    <Box pl={8} pt={4}>\n      <Box display=\"flex\">\n        <Checkbox size=\"lg\" mr={4} isChecked={isAllChecked} isIndeterminate={isIndeterminateSubTask} onChange={(e) => updateAllChecked(e)} />\n        <Box color={taskTextColor()} key={index} onClick={() => setCreate(true)}>{item.text}</Box>\n      </Box>\n      {list.map((item, index) => {\n        return (\n          <Box display=\"flex\" mt={4} ml={8} textAlign=\"left\">\n            <Checkbox size=\"lg\" mr={4} isChecked={item.isChecked} onChange={(e) => updateCheckboxListState(e, item.text)} />\n            <Box>\n              {item.text}\n              {index}\n            </Box>\n          </Box>\n        )\n      })}\n      {create && (\n        <Box mx={8}>\n          <Input ref={inputEl} value={currentTextFieldValue} onChange={(e) => setCurrentTextFieldValue(e.target.value)} onKeyPress={(e) => enterHandler(e)} onBlur={() => blurHandler()} mt={4} display=\"inline-block\" />\n        </Box>\n        )}\n    </Box>\n  )\n}\n\nexport default SubTask","import './App.css';\nimport { Box, Input } from \"@chakra-ui/react\"\nimport SubTask from './components/SubTask';\nimport useTask from './hooks';\n\nfunction App() {\n  const { list, enterHandler, currentTextFieldValue, setCurrentTextFieldValue } = useTask()\n  return (\n    <div className=\"App\">\n      <main>\n        <ul>\n          {list.map((item, index) => {\n              return (\n                <SubTask {...item} {...index} {...list} />\n              )\n            }\n          )}\n\n        </ul>\n\n        <Box display=\"flex\" alignItems=\"center\" mt={10} mx={8}>\n          <Input value={currentTextFieldValue} display=\"inline-block\" placeholder=\"新しいタスクを作成\" onChange={(e) => setCurrentTextFieldValue(e.target.value)} onKeyPress={(e) => enterHandler(e)} />\n        </Box>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}