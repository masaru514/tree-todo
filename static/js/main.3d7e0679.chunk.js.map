{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","list","setList","currentTextFieldValue","setCurrentTextFieldValue","SubTask","item","index","create","setCreate","subList","setSubList","currentSubTextFieldValue","setCurrentSubTextFieldValue","pl","pt","display","onClick","size","mr","text","map","value","onChange","e","target","onKeyPress","key","enterSubTaskHandler","onBlur","console","log","ml","mt","className","alignItems","mx","placeholder","enterHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4PAkFeA,MAzEf,WAAgB,IAAD,EACWC,mBAAgC,IAD3C,mBACNC,EADM,KACAC,EADA,OAE6CF,mBAAS,IAFtD,mBAENG,EAFM,KAEiBC,EAFjB,OAUaJ,oBAAS,GAVtB,mBAYPK,GAZO,UAYG,SAACC,EAAWC,GAAmB,IAAD,EAChBP,oBAAS,GADO,mBACrCQ,EADqC,KAC7BC,EAD6B,OAEdT,mBAAgC,IAFlB,mBAErCU,EAFqC,KAE5BC,EAF4B,OAGoBX,mBAAS,IAH7B,mBAGrCY,EAHqC,KAGXC,EAHW,KAsB5C,OACE,eAAC,IAAD,CAAKC,GAAI,EAAGC,GAAI,EAAhB,UACE,eAAC,IAAD,CAAKC,QAAQ,OAAOC,QAAS,WAnB/BR,GAAU,IAmBR,UACE,cAAC,IAAD,CAAUS,KAAK,KAAKC,GAAI,IACxB,8BAAkBb,EAAKc,MAAbb,MAEXG,EAAQW,KAAI,SAAAf,GACX,OACE,8BACGA,EAAKc,UAIXZ,GAAU,cAAC,IAAD,CAAOc,MAAOV,EAA0BW,SAAU,SAACC,GAAD,OAAOX,EAA4BW,EAAEC,OAAOH,QAAQI,WAAY,SAACF,GAAD,OA3BrG,SAACA,GACb,UAAVA,EAAEG,KAAgD,KAA7Bf,IAClBD,EAAPV,EAAkB,GAAD,mBAAKS,GAAL,CAAc,CAAEU,KAAMR,KAA0C,CAAC,CAAEQ,KAAMR,KAC1FC,EAA4B,KAwB0Ge,CAAoBJ,IAAIK,OAAQ,kBAnBtKC,QAAQC,IAAI,OACFpB,EAAVD,EAAqB,GAAD,mBAAKA,GAAL,CAAc,CAAEU,KAAMR,KAA0C,CAAC,CAACQ,KAAMR,KAC5FC,EAA4B,SAC5BJ,GAAU,IAgBkLuB,GAAI,EAAGC,GAAI,EAAGjB,QAAQ,sBAKtN,OACE,qBAAKkB,UAAU,MAAf,SACE,iCACE,6BACGjC,EAAKoB,KAAI,SAACf,EAAMC,GACb,OACE,cAACF,EAAD,2BAAaC,GAAUC,SAO/B,cAAC,IAAD,CAAKS,QAAQ,OAAOmB,WAAW,SAASF,GAAI,GAAIG,GAAI,EAApD,SACE,cAAC,IAAD,CAAOd,MAAOnB,EAAuBa,QAAQ,eAAeqB,YAAY,QAAQd,SAAU,SAACC,GAAD,OAAOpB,EAAyBoB,EAAEC,OAAOH,QAAQI,WAAY,SAACF,GAAD,OA/D1I,SAACA,GACN,UAAVA,EAAEG,KAA6C,KAA1BxB,IAClBD,EAAPD,EAAe,GAAD,mBAAKA,GAAL,CAAW,CAAEmB,KAAMjB,KAAoC,CAAC,CAAEiB,KAAMjB,KAC9EC,EAAyB,KA4D2IkC,CAAad,cC7DtKe,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,QCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3d7e0679.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { Box, Checkbox, Input } from \"@chakra-ui/react\"\nimport { cond } from 'lodash';\n\ntype TodoListObjectProps = {\n  text: string\n}\n\nfunction App() {\n  const [list, setList] = useState<TodoListObjectProps[]>([])\n  const [currentTextFieldValue, setCurrentTextFieldValue] = useState('')\n  const enterHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n    if (e.key !== 'Enter' || currentTextFieldValue === '') return\n    list ? setList([...list, { text: currentTextFieldValue }]) : setList([{ text: currentTextFieldValue }])\n    setCurrentTextFieldValue('')\n  }\n\n  // サブタスクのテキストフィールドの存在を監視する\n  const [watch, setWatch] = useState(false)\n\n  const SubTask = (item: any, index: number) => {\n    const [create, setCreate] = useState(false)\n    const [subList, setSubList] = useState<TodoListObjectProps[]>([])\n    const [currentSubTextFieldValue, setCurrentSubTextFieldValue] = useState('')\n    const createSubtask = () => {\n      setCreate(true)\n    }\n\n    const enterSubTaskHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key !== 'Enter' || currentSubTextFieldValue === '') return\n      list ? setSubList([...subList, { text: currentSubTextFieldValue }]) : setSubList([{ text: currentSubTextFieldValue }])\n      setCurrentSubTextFieldValue('')\n    }\n\n    const blurHandler = () => {\n      // if (currentSubTextFieldValue === '') return\n      console.log('ee?')\n      subList ? setSubList([...subList, { text: currentSubTextFieldValue }]) : setSubList([{text: currentSubTextFieldValue}])\n      setCurrentSubTextFieldValue('')\n      setCreate(false)\n    }\n\n    return (\n      <Box pl={8} pt={4}>\n        <Box display=\"flex\" onClick={() => createSubtask()}>\n          <Checkbox size=\"lg\" mr={4} />\n          <div key={index}>{item.text}</div>\n        </Box>\n        {subList.map(item => {\n          return (\n            <div>\n              {item.text}\n            </div>\n          )\n        })}\n        {create && <Input value={currentSubTextFieldValue} onChange={(e) => setCurrentSubTextFieldValue(e.target.value)} onKeyPress={(e) => enterSubTaskHandler(e)} onBlur={() => blurHandler()}  ml={8} mt={4} display=\"inline-block\" />}\n      </Box>\n    )\n  }\n\n  return (\n    <div className=\"App\">\n      <main>\n        <ul>\n          {list.map((item, index) => {\n              return (\n                <SubTask {...item} {...index} />\n              )\n            }\n          )}\n\n        </ul>\n\n        <Box display=\"flex\" alignItems=\"center\" mt={10} mx={8}>\n          <Input value={currentTextFieldValue} display=\"inline-block\" placeholder=\"baxic\" onChange={(e) => setCurrentTextFieldValue(e.target.value)} onKeyPress={(e) => enterHandler(e)} />\n        </Box>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <ChakraProvider>\n      <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}